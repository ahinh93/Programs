#include "Image.h"
#include <iostream>
#include <string>
#include <string.h>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
//#include <cstddef>
using namespace std;
Image::Image()
{
	pixels = NULL;
	width = 0;
	height = 0;
}

Image::Image(int w, int h)
{
	width = w;
	height = h;
	pixels = new float**[height];	
	int i, j, k;
	for (i = 0; i < height; i++)
	{
		pixels[i] = new float*[width];
		for (j = 0; j < width; j++)
		{
			pixels[i][j] = new float[3];
			for (k = 0; k < 3; k++)
			{
				pixels[i][j][k] = 0;
			}
		}
	}
}

Image::Image(const Image& I)
{
	int i, j, k;
	width = I.getWidth();
	height = I.getHeight();
	
	pixels = new float**[height];
	for (i = 0; i<height; i++)
	{
		pixels[i] = new float*[width];
		for (j = 0; j < width; j++)
		{
			pixels[i][j] = new float[3];
			for (k = 0; k<3; k++)
			{
				pixels[i][j][k] = I.pixels[i][j][k];
			}
		}
	}
}

int Image::getWidth() const
{
	return width;
}
	
int Image::getHeight() const
{
	return height;
}

bool Image::fromPPMFile(string filename)
{
	const char* cfilename;
	
	cfilename = filename.c_str();

	string line;
	ifstream fin(cfilename, ios::in);
	if (fin.is_open())
	{
	
		if (fin >> line)
		{
			if (line.compare("P3") != 0)
			{
				
				fin.close();
				return false;
			}
		}

		if (fin >> line)
		{
			width = atoi(line.c_str());
		}
		if (fin >> line)
		{
			height = atoi(line.c_str());
		}

		int factor;
		if (fin >> line)
		{
			factor = atoi(line.c_str());
		}

		int i, j, k;
		pixels = new float**[height];
		for (i = 0; i<height; i++)
		{
			
			pixels[height-1-i] = new float*[width];
			for (j = 0; j < width; j++)
			{
				pixels[height-1-i][j] = new float[3];
				float red, green, blue;
				int redInt, greenInt, blueInt;
	
				fin >> redInt;
				red = (float)redInt/factor;

				fin >> greenInt;
				green = (float)greenInt/factor;

				fin >> blueInt;
				blue = (float)blueInt/factor;
			
				pixels[height-1-i][j][0] = red;
				pixels[height-1-i][j][1] = green;
				pixels[height-1-i][j][2] = blue;
				//cout << red << ", " << green << ", " << blue << endl;
			}
		}
		fin.close();

		return true;
	}
}
