When fork() is called, the current process creates a child process, which is a new process that takes on the parents' address space. A child process may either be given resources to run either from the operating system or share resources with its parent process. The child process is given a new process id but takes on the parents' id for the ppid. The parent may either continue executing its process or wait until the child process completes its task. 

exec() is a system call that a process calls (by either parent or child) that loads a binary file into memory and executes that command. exec() will erase the previous task the process had and perform whichever binary file operation the user wants. If the parent process requires the completion of the child process before the parent can move on with the task, it can call wait() in order to take itself off the ready queue. The reason it would want to do that is because there is no point to have a process occupy resources if it doesn't need immediate attention, therefore it calls wait() to come back after its children process have completed. The book states that execlp() is a slight variation but is primarily the same function as exec() for system calls, so we can assume execlp() behaves similarly to exec().
