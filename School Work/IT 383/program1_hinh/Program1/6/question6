First, in shm_fileuploader, I define my struct to include a flag, an integer size, and a char buffer that will hold the users input. From there, I prepare to create a shared memory object with size 2048 bytes. This requires a constant string that gives the file a name. I create a file descriptor by calling shm_open and pass the const name, the commands to create read and write to file, along with file permissions to access that file. I then call truncate to allocate memory to the file descriptor table with the requested 2048 bytes. After, I create a memory map to the shared memory object that was created earlier. I give the parameters for size, to be able to write, and the file descriptor table. Finally, I request from the user the name of the file they want shared to the program and capture it with scanf and put it into a char array of size 50. 

In file downloader, I prepare to open a shared memory object in a similar fashion. I call shm_open and feed it the same name from the uploader, and give it a readonly command along with open permissions. I then pass the file descriptor shared memory object into mmap and give it read permissions, along with 2048 byte request. If the pointer equals -1, then the location was empty. Otherwise it will attempt to open the file location with fseek. ftell will return the position of the pointer. With that, the program will create an output text file that will write the content from the opened file using the integer returned from ftell to indicate how far to write from the pointer. fclose closes writing to the file.
