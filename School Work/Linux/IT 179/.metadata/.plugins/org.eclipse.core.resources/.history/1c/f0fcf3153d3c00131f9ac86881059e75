/**
 * 10/23/13 
 * @author Andrew Hinh
 */
import myUtil.*;
import java.util.*;
import java.io.*;

public class Asg6 {

	public static void main(String[] args) {
		
		
		try
		{
			Scanner in;
			if (args[0].length() != 0) {
				 in = new Scanner (new File(args[0]));
				
			}
			else {
				 in = new Scanner (new File("/home/ahinh/IT179/Asg6/arithExps.txt"));
			}
			
			while (in.hasNext()) {
				String fullLine = in.nextLine();
				AStack<String> opStack = new AStack<String>(fullLine.length());
				AStack<Double> numStack = new AStack<Double>(fullLine.length());
				
				int counter = 0;
				while(counter < fullLine.length()) {
				
					if (fullLine.charAt(counter) != '(' || fullLine.charAt(counter) != ')' || fullLine.charAt(counter) != '+' || fullLine.charAt(counter) != '-' ||
							fullLine.charAt(counter) != '^' || fullLine.charAt(counter) != '*' ) {
						numStack.push(Double.parseDouble(fullLine.charAt(counter)));
					}
					
					else {
						switch(fullLine.charAt(counter)) {
						//always push (out, once stored, lowest priority of 0
						case '(': 
							opStack.push(new operatorObj(fullLine.charAt(counter),0));
							break;
						case '^':
							opStack.push(new operatorObj(fullLine.charAt(counter), 75));
							break;
						case '/':
							if (checkPriority(numStack, 50){
								opStack.push(new operatorObj(fullLine.charAt(counter), 50));
							}
							else {
								computeTwo(opStack, numStack);
							}
							break;
							
						case '*':
							if (checkPriority(numStack, 50){
								opStack.push(new operatorObj(fullLine.charAt(counter), 50));
								}
							else {
									computeTwo(opStack, numStack);
								}
							break;
						case '+':
							if (opStack.peek().priority())
								
							
						}
					}
					counter++;
				}
			}
			//returns true if the current priority trying to be added is higher than top of stack
			private static boolean checkPriority(AStack<Double> nums, int currentPriority) {
				return (currentPriority > nums.peek().priority());
			}
			private static void computeTwo(AStack<String> ops, AStack<Double> nums) {
				double num2 = nums.pop();
				double num1 = nums.pop();
				char peek = ops.peek();
				
				if (peek == '*') {
					ops.pop();
					nums.push(num1*num2);
				}
				else if (peek == '/') {
					ops.pop();
					nums.push(num1/num2);
				}
				else if (peek == '+') {
					ops.pop();
					nums.push(num1+num2);
				}
				else if (peek == '-') {
					ops.pop();
					nums.push(num1-num2);
				}
				else if (peek == '^') {
					ops.pop();
					nums.push(Math.pow(num1, num2));
				}
				
				
				
			}
			
		}

		catch (FileNotFoundException e)
		{
			
			System.out.println("No argument nor file was found.");
		}
	
	}

}
