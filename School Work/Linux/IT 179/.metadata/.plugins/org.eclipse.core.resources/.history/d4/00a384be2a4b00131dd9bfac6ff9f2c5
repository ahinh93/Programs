/**
 * 10/23/13 
 * @author Andrew Hinh
 */
import myUtil.*;

import java.text.DecimalFormat;
import java.util.*;
import java.io.*;

public class Asg6 {

	public static void main(String[] args) {

		Scanner in;
		AStack operands;
		AStack values;
		DecimalFormat nf = new DecimalFormat("#0.####");
		try {
			in = new Scanner(new File("/home/cli2/public/IT179/arithExps.txt"));
			
			while (in.hasNext()) {
				String fullLine = in.nextLine();
				
				System.out.print(fullLine + " = " + nf.format(computeLine(fullLine))+ "\n");
				
			}

		}
		catch (FileNotFoundException e)
		{			
			System.out.println("No argument nor file was found.");
		}	
	}
	private static double computeLine(String a) {
		double lineTotal = 0;
		AStack<String> opStack = new AStack<String>(a.length());
		AStack<Double> numStack = new AStack<Double>(a.length());
		String spacedLine = "";
		
		String o,c,t,d,p,m,e;
		o = "("; //open parenthesis
		c = ")"; //close parenthesis
		t = "*"; //times
		d = "/";// divide
		p = "+";//plus
		m = "-";//minus
		e = "^";//exponent
		
		for (int i = 0; i < a.length(); i++) {

			if (a.charAt(i) == '(' || a.charAt(i) == ')' || 
					a.charAt(i) == '*' || a.charAt(i) == '/' || 
					a.charAt(i) == '+' || a.charAt(i) == '-' || 
					a.charAt(i) == '^') {
				spacedLine += (" " +a.charAt(i) + " ");			
			}
			else {
				spacedLine+= a.charAt(i);
			}
		}
		//spacedLine is now formated line to space between double and operator
		
		//2 goals: print postfix THEN return total
		Scanner scan = new Scanner(spacedLine);
		
		while (scan.hasNext()) {
			//if next item is NOT an operator aka its a value
			if (scan.next() != o || scan.next() != c || scan.next() != t || scan.next() != d || 
					scan.next() != m || scan.next() != p || scan.next() != e) {
				numStack.push(Double.parseDouble(scan.next()));
			}
			//if its an operator
			else {
				//if stack is empty, push operator
				if (opStack.empty()) opStack.push(scan.next());
				//if stack is not empty
				else if 
				
			}
			
		}
	}
	/* Will take out two values from numStack and operator from opStack
	 * Will print out equation in post fix and add new value into numStack
	 */
	private static void postFix(String o) {
		double first, second;
		
		second = numValue.pop();
		first = numValue.pop();
		if (o == "^") {
			System.out.print(first + " " + second + " ^ = " + Math.pow(first, second));
		}
	}
}
