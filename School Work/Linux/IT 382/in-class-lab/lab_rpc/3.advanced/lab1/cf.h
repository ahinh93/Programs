/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CF_H_RPCGEN
#define _CF_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif


typedef char *cfs_pathname;

typedef struct {
	u_int cfs_file_data_len;
	char *cfs_file_data_val;
} cfs_file_data;

enum cfs_error {
	CFERR_NONE = 0,
	CFERR_NO_SUCH_NAME = 0 + 1,
	CFERR_NAME_EXISTS = 0 + 2,
	CFERR_NOT_A_DIRECTORY = 0 + 3,
	CFERR_IS_A_DIRECTORY = 0 + 4,
};
typedef enum cfs_error cfs_error;

struct cfs_read_res {
	cfs_error errno;
	union {
		cfs_file_data data;
	} cfs_read_res_u;
};
typedef struct cfs_read_res cfs_read_res;

struct cfs_write_arg {
	cfs_pathname pn;
	cfs_file_data data;
};
typedef struct cfs_write_arg cfs_write_arg;

struct cfs_readdir_res {
	cfs_error errno;
	union {
		struct {
			u_int ents_len;
			cfs_pathname *ents_val;
		} ents;
	} cfs_readdir_res_u;
};
typedef struct cfs_readdir_res cfs_readdir_res;

#define CFS_PROG 422222
#define CFS_VERS1 1

#if defined(__STDC__) || defined(__cplusplus)
#define CFS_NULL 0
extern  enum clnt_stat cfs_null_1(void *, void *, CLIENT *);
extern  bool_t cfs_null_1_svc(void *, void *, struct svc_req *);
#define CFS_READ 1
extern  enum clnt_stat cfs_read_1(cfs_pathname *, cfs_read_res *, CLIENT *);
extern  bool_t cfs_read_1_svc(cfs_pathname *, cfs_read_res *, struct svc_req *);
#define CFS_WRITE 2
extern  enum clnt_stat cfs_write_1(cfs_write_arg *, cfs_error *, CLIENT *);
extern  bool_t cfs_write_1_svc(cfs_write_arg *, cfs_error *, struct svc_req *);
#define CFS_MKDIR 3
extern  enum clnt_stat cfs_mkdir_1(cfs_pathname *, cfs_error *, CLIENT *);
extern  bool_t cfs_mkdir_1_svc(cfs_pathname *, cfs_error *, struct svc_req *);
#define CFS_MKFILE 4
extern  enum clnt_stat cfs_mkfile_1(cfs_pathname *, cfs_error *, CLIENT *);
extern  bool_t cfs_mkfile_1_svc(cfs_pathname *, cfs_error *, struct svc_req *);
#define CFS_DELETE 5
extern  enum clnt_stat cfs_delete_1(cfs_pathname *, cfs_error *, CLIENT *);
extern  bool_t cfs_delete_1_svc(cfs_pathname *, cfs_error *, struct svc_req *);
#define CFS_READDIR 6
extern  enum clnt_stat cfs_readdir_1(cfs_pathname *, cfs_readdir_res *, CLIENT *);
extern  bool_t cfs_readdir_1_svc(cfs_pathname *, cfs_readdir_res *, struct svc_req *);
extern int cfs_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define CFS_NULL 0
extern  enum clnt_stat cfs_null_1();
extern  bool_t cfs_null_1_svc();
#define CFS_READ 1
extern  enum clnt_stat cfs_read_1();
extern  bool_t cfs_read_1_svc();
#define CFS_WRITE 2
extern  enum clnt_stat cfs_write_1();
extern  bool_t cfs_write_1_svc();
#define CFS_MKDIR 3
extern  enum clnt_stat cfs_mkdir_1();
extern  bool_t cfs_mkdir_1_svc();
#define CFS_MKFILE 4
extern  enum clnt_stat cfs_mkfile_1();
extern  bool_t cfs_mkfile_1_svc();
#define CFS_DELETE 5
extern  enum clnt_stat cfs_delete_1();
extern  bool_t cfs_delete_1_svc();
#define CFS_READDIR 6
extern  enum clnt_stat cfs_readdir_1();
extern  bool_t cfs_readdir_1_svc();
extern int cfs_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_cfs_pathname (XDR *, cfs_pathname*);
extern  bool_t xdr_cfs_file_data (XDR *, cfs_file_data*);
extern  bool_t xdr_cfs_error (XDR *, cfs_error*);
extern  bool_t xdr_cfs_read_res (XDR *, cfs_read_res*);
extern  bool_t xdr_cfs_write_arg (XDR *, cfs_write_arg*);
extern  bool_t xdr_cfs_readdir_res (XDR *, cfs_readdir_res*);

#else /* K&R C */
extern bool_t xdr_cfs_pathname ();
extern bool_t xdr_cfs_file_data ();
extern bool_t xdr_cfs_error ();
extern bool_t xdr_cfs_read_res ();
extern bool_t xdr_cfs_write_arg ();
extern bool_t xdr_cfs_readdir_res ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CF_H_RPCGEN */
