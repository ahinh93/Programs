Before pthread_attr_init() is called, the program creates a variable called attr. This variable represents a threads' attributes including stack size and scheduling information. pthread_t tid declares the thread itself. init() takes in the pthread attributes as a parameter and initializes them  so they are no longer garbage values to pthreads' default values unless otherwise specified.
Next, pthread_create() that takes three parameters: the first is the thread identifier, which tells the function which thread to operate on along with its corresponding attributes. runner is a parameter being passed, which is a generic object used in C. This object will soon be converted into a separate thread. Finally, the last paremter is an integer passed from the command line.
Now, two threads exist. pthread_join() is called that takes the original thread and NULL, which is equivalent to parent-child fork(), where the parent thread will wait until the child thread terminates before continuing with its own process. The number of child threads created at this point is based off the number that the user specified during user input and is passed into runner. runner() is called by all threads and added to the global variable sum. Each thread adds a total of 1 to sum, therefore when the user enters 3 during the initial build, sum will equal 4 by the end. One for the original thread and 3 from the newly created threads.
Finally, pthread_exit() terminates the thread itself similar to system.exit() which takes an integer to specify the level of termination. It is important to note that pthread.h is included at the top in order to use the thread library provided in C. -pthread is also included in the makefile to let the compiler know ahead of time that pthreads will be used. The book mentions that pthreads are not an implemented in programs but rather specified to be used. When developing new operating systems, users may choose to specify them in anyway they wish. 
