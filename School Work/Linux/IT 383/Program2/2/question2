 Each thread has its own agenda also known as a thread function. When creating a new thread, we will use the pthread library in c. pthread_create() creates a new thread and takes parameters: the first is a pointer to a new pthread_t variable which the identification of the thread will be stored. The second parameter is a pointer to a thread attribute object. This object contains variables or attributes; when we pass NULL, the thread will set its attributes to the default values. The third pointer is a pointer to the thread function and fourth is reserved for arguments intended for the new thread to execute. thread-create.c's original thread continually prints x's to the standard error. Once the new thread is created, that thread will continually print o's. It is important to note that the console is now printing both x's and o's, however the same letter gets printed repeatedly for a short period of time before switching to the other letter and back. pthread_exit is never called therefore both threads will continue to run. 

create-thread2 creates two new threads, three threads in total. One thread is dedicated to printing x while the other prints o's and then terminates through a return statement within the thread. Revised thread-create2 solves an issue with the original in that it tells the original  main method to wait for the completion of its child threads before continuing with its own contents. pthread_join takes two parameters, one of which is a pointer to a variable that denotes the completion of its child thread. pthread_join doesn't move on until the completion, similar to multiprocesses' wait(). 

primes.c tests what happens when you pass a non-null parameter for the 2nd argument in pthread_join(). When something that isn't null is passed, once the child thread is completed (from first parameter), the return value will be placed to that pointer location. This can be useful to the user in order to pass information between threads or help debug child threads by seeing what the return value is. 

before threads are initialized, attributes are required. Attributes only need to exit during initialization and are no longer required afterwards. Threads are either joinable or detached, joinable meaning not cleaned up by the operating system once terminated (similar to orphan process) until the user calls pthread_join. To start the detaching state, we call pthread_attr_setdetachstate(). If the thread is already a joinable state, it may be switched by calling pthread_detach.
