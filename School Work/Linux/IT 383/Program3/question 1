In this program, we use a semaphore and a mutex lock. A semaphore puts the system on hold(or wait) for a short amount of time, expecting to release when they're ready. The purpose is to control numerous processes on the same resource, in this case we use a buffer. The number of item within a buffer is limited. The semaphore is responsible for deciding 'when' a process can attempt to modify the buffer while the mutex controls how many processes can call insert_item or remove_item at a time, to just 1 process at a time. 

In the main we take 3 parameters, the 2nd and 3rd specify how many producers and consumers should be created as separate threads handled within the for loops. Once created, the main will sleep while the other threads continue to run until completion. We call pthread_attr_init to initialize thread attributes created as global variables. pthread_mutex_init initializes the mutex attributes which are also global variables. We then initialize the semaphores with sem_init and pass it 3 parameters. The first one is the reference to the newly created semaphore, the second is 0 because we want to share the semaphore across threads of a process, and third is the intial value of the semaphore.
